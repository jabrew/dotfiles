# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi
# Not found: compdef when starting - try https://github.com/sorin-ionescu/prezto/issues/1138
# e.g. rm ~/.zcomp{dump*,cache}
# powerline-daemon -q
# . /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh

# Customize to your needs...

# Other exports

export EXPORT_NAME=''

# Originally for hologram, needed?
unsetopt EQUALS

# Aliases

# Stop prompting to remove every file
# unalias rm
alias rm='nocorrect rm'
alias cp='nocorrect cp'
alias mv='nocorrect mv'

alias cd..='cd ..'
alias ..='cd ..'
alias cd-='cd -'

alias up='git fetch && git rebase origin/main'
alias uploc='git rebase origin/main'
alias pb="cd ~/code/my_repo; printf '\\033kmy_repo\\033\\\\'"
alias b='~/scripts/build.py'
alias u='~/scripts/upload.py'
alias wiki='pushd ~/vimwiki && wiki -g ~/vimwiki/index.wiki && popd'
alias synczsh='rsync -aPvh ~/.zprezto/ target_machine:/home/jbrewer/.zprezto'
alias pc='~/bin/tmux-copycat/scripts/copycat_mode_start.sh ''^❯'''
# Note: Mac only - need to switch based on os
alias less='less -R'
alias rgp='rg -t py'

alias tclip='tmux show-buffer | pbcopy'

alias pip='pip3'
alias python='python3'

title () {
  printf '\033k'
  printf $@
  printf '\033\\'
}

function rename_tab {
  # Note: May require tmux set-option -g set-titles on
  echo -ne "\033]0;"$@"\007"
}
rename_tab zsh

say () {
  printf '\x1bPtmux;\x1b\x1b]9;'
  printf $@
  printf "\x07\x1b\\"
}

# export PATH=

# # Tab descriptors
# setTerminalText () {
#     local mode=$1 ; shift
#     echo -ne "\033]$mode;$@\007"
# }
# # Tmux only respects stt_title
# stt_both  () { setTerminalText 0 $@; }
# stt_tab   () { setTerminalText 1 $@; }
# stt_title () { setTerminalText 2 $@; }

SYNC_OTHER_FILES='\
  ~/.scmbrc \
  ~/.git.scmbrc \
  ~/.gitconfig \
  ~/.bash_custom \
  ~/scripts \
'
alias syncother="\
  rsync -aPvh --exclude '.*.swp' $SYNC_OTHER_FILES target_machine:/home/jbrewer/ &&
  rsync -aPvh --exclude '.*.swp' $SYNC_OTHER_FILES target_machine2:/home/jbrewer/
"

alias sw='git checkout'
alias br='git branch'
alias gs='git status'

alias mailme='~/scripts/send-mail.py -t jbrewer@company.com -l $? -s'
# function mailme() {
#   ~/scripts/send-mail.py -t jbrewer@company.com -s "$@"
# }

# # Scmpuff only
# function expand_cmd() {
#    eval "$(scmpuff expand -- "$@")";
# }

# Machine specific aliases
if [[ $HOME == "/Users/$USER" ]]; then
  # E.g. running on a mac
  alias dev='ssh target_machine'
  alias ls='ls -F'

  export MY_HOST_NAME='laptop'

  alias cln="echo Probably want to clean server, otherwise: git reset --hard \&\& git clean -fd --exclude virtualenv"
  alias ws='touch test.txt; sleep 1; rm test.txt'
  # alias gvim='expand_cmd mvim'
  alias gvim='ge mvim'

  alias tmwatch="teamocil --layout ~/scripts/teamocil_watch.yaml --here"

  # export PATH="/usr/local/Cellar/ruby/2.4.0/bin:$PATH"
  # eval "$(rbenv init -)"

  alias devml='cd ~/code/ml && VIRTUAL_ENV_DISABLE_PROMPT=1 source ~/code/dev/bin/activate'
  alias undev='deactivate'
else
  # Server
  alias st='zsh'
  alias stt='tmux source-file ~/.tmux.conf'
  alias ls='ls -F --color'
  alias cln='git reset --hard && git clean -fd --exclude virtualenv'
  fixssh() {
    eval $(tmux show-env | sed -n 's/^\(SSH_[^=]*\)=\(.*\)/export \1="\2"/p')
  }

  if [[ `hostname` =~ '^.*jbrewer$' ]]; then
    export MY_HOST_NAME='specific_server'

    alias att='cd ~/code/my_repo && tmux attach -t session_name'
    alias attac='tmux new-session -s session_name'
  elif [[ `hostname` =~ 'another-host-.*' ]]; then
    export MY_HOST_NAME='another_server'

    # E.g. tmux in specific path for shared server
    alias att='tmux -S ~/tmux-sockets/dev attach'
    alias attac='tmux -S ~/tmux-sockets/dev new-session'
  else
    export MY_HOST_NAME='another_server'

    alias km='~/scripts/kill_proc.sh a'
    alias kb='~/scripts/kill_proc.sh b'
  fi
  alias nb='jupyter notebook --port 46780 --no-browser'
fi

# Paths
export PATH=~/bin:$PATH
export PATH=~/scripts:$PATH

# Zsh options
setopt AUTO_PUSHD
# ls c* shows a list instead of inserting matching
setopt GLOB_COMPLETE
setopt PUSHD_MINUS
setopt PUSHD_IGNORE_DUPS

setopt ZLE
setopt IGNORE_EOF

setopt NO_FLOW_CONTROL

setopt EXTENDED_GLOB
setopt NUMERIC_GLOB_SORT
setopt RC_EXPAND_PARAM

# Overwrite files with a pipe
setopt CLOBBER

# Allow comments inline in the shell
setopt interactivecomments

setopt INC_APPEND_HISTORY
HISTSIZE=100000
SAVEHIST=100000

export CLICOLOR=1

export EDITOR=vim
export VISUAL=vim

# Dasht {
export MANPATH=~/bin/dasht/man
export PATH=~/bin/dasht/bin:$PATH
export DASHT_DOCSETS_DIR=~/bin/dasht/docsets
# }

# Scm puff
# Note: scmpuff doesn't correctly handle paths (try git checkout -b my_branch)
eval "$(scmpuff init -s)"

# Scm breeze {
# [ -s "$HOME/.scm_breeze/scm_breeze.sh" ] && source "$HOME/.scm_breeze/scm_breeze.sh"
# }

# iTerm2 shell integration - doesn't work with tmux
# test -e "${HOME}/scripts/.iterm2_shell_integration.zsh" && source "${HOME}/scripts/.iterm2_shell_integration.zsh"

# Note: Use cat -v then type characters to find the right codes
bindkey 'ƒ' emacs-forward-word
bindkey '∫' emacs-backward-word
# Idea is up/down are search-including-substrings, ctrl-p/ctrl-n are prefix only
# https://www.reddit.com/r/zsh/comments/wpicho/debugging_overwritten_bindkey_cmds/
# - up/down are also hard to rebind, something overrides bindkey within prezto,
# but these work
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^P' up-line-or-beginning-search
bindkey '^N' down-line-or-beginning-search

source ~/.zshrc-snap

# From
# https://stackoverflow.com/questions/9810327/zsh-auto-completion-for-git-takes-significant-amount-of-time-can-i-turn-it-off
# - should fix very slow autocomplete for possibly-remote items
__git_files () {
  _wanted files expl 'local files' _files
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
